from telethon import TelegramClient, events
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta, timezone
import asyncio
import pytz

API_ID = 28285997
API_HASH = "ed9c2749be7b40b4395c6af26c2b6bad"
SESSION = "daily_summary_session"
CHANNEL_ID = -1003188966218  # ID –∫–∞–Ω–∞–ª—É

# –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∏—î–≤–∞
kyiv_tz = pytz.timezone("Europe/Kyiv")

client = TelegramClient(SESSION, API_ID, API_HASH)

# ----------------- —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É -----------------
async def count_messages(days):
    """–ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Ç–µ–∫—Å—Ç–æ–º '–Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ' –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ days –¥–Ω—ñ–≤."""
    now = datetime.now(kyiv_tz)
    since = now - timedelta(days=days)
    count = 0

    async for msg in client.iter_messages(CHANNEL_ID, search="–Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ"):
        msg_time = msg.date.replace(tzinfo=timezone.utc).astimezone(kyiv_tz)
        if msg_time >= since:
            count += 1

    return count

# ----------------- –∫–æ–º–∞–Ω–¥–∏ -----------------
@client.on(events.NewMessage(chats=CHANNEL_ID))
async def handler(event):
    text = event.message.message.strip().lower()

    if text == "/check":
        count = await count_messages(1)
        date_str = datetime.now(kyiv_tz).strftime("%d %B %Y").replace("October", "–∂–æ–≤—Ç–Ω—è")
        await client.send_message(
            CHANNEL_ID,
            f"üìÖ {date_str}\nüì¶ –ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è: {count} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—å"
        )

    elif text == "/week":
        count = await count_messages(7)
        now = datetime.now(kyiv_tz)
        start = (now - timedelta(days=6)).strftime("%d %B").replace("October", "–∂–æ–≤—Ç–Ω—è")
        end = now.strftime("%d %B").replace("October", "–∂–æ–≤—Ç–Ω—è")
        await client.send_message(
            CHANNEL_ID,
            f"üóìÔ∏è –ü—ñ–¥—Å—É–º–æ–∫ —Ç–∏–∂–Ω—è, {start} ‚Äî {end}\n–£—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–æ–∫: {count}"
        )

    elif text == "/check_all":
        count = await count_messages(9999)
        await client.send_message(CHANNEL_ID, f"üì¶ –£—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—å –∑–∞ –≤–µ—Å—å —á–∞—Å: {count}")

# ----------------- —â–æ–¥–µ–Ω–Ω–∏–π —ñ —Ç–∏–∂–Ω–µ–≤–∏–π –ø—ñ–¥—Å—É–º–æ–∫ -----------------
async def send_day_summary():
    count = await count_messages(1)
    now = datetime.now(kyiv_tz)
    date_str = now.strftime("%d %B %Y").replace("October", "–∂–æ–≤—Ç–Ω—è")
    await client.send_message(CHANNEL_ID, f"üìÖ {date_str}\nüì¶ –ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è: {count} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—å")

async def send_week_summary():
    count = await count_messages(7)
    now = datetime.now(kyiv_tz)
    start = (now - timedelta(days=6)).strftime("%d %B").replace("October", "–∂–æ–≤—Ç–Ω—è")
    end = now.strftime("%d %B").replace("October", "–∂–æ–≤—Ç–Ω—è")
    await client.send_message(CHANNEL_ID, f"üóìÔ∏è –ü—ñ–¥—Å—É–º–æ–∫ —Ç–∏–∂–Ω—è, {start} ‚Äî {end}\n–£—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–æ–∫: {count}")

# ----------------- –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ -----------------
scheduler = AsyncIOScheduler(timezone="Europe/Kyiv")
scheduler.add_job(send_day_summary, "cron", hour=18, minute=0)
scheduler.add_job(send_week_summary, "cron", day_of_week="fri", hour=18, minute=1)

# ----------------- –∑–∞–ø—É—Å–∫ -----------------
async def main():
    await client.start()
    print("‚úÖ Userbot –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ, —á–µ–∫–∞—î –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    scheduler.start()
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
