from telethon import TelegramClient, events
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta, timezone
import asyncio, os, pytz, threading
from http.server import SimpleHTTPRequestHandler, HTTPServer

# ----------------------------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è -----------------------------
API_ID = 28285997
API_HASH = "ed9c2749be7b40b4395c6af26c2b6bad"
SESSION = "daily_summary_session"
CHANNEL_ID = -1003188966218  # ID —Ç–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É
kyiv_tz = pytz.timezone("Europe/Kyiv")

client = TelegramClient(SESSION, API_ID, API_HASH)

# ----------------------------- –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å -----------------------------
async def count_messages(days=None):
    """–ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ '–Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ' –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ N –¥–Ω—ñ–≤ –∞–±–æ –∑–∞ –≤–µ—Å—å —á–∞—Å."""
    now = datetime.now(kyiv_tz)
    since = now - timedelta(days=days) if days else None
    count = 0

    async for msg in client.iter_messages(CHANNEL_ID, search="–Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ"):
        msg_time = msg.date.replace(tzinfo=timezone.utc).astimezone(kyiv_tz)
        if since and msg_time < since:
            break
        count += 1
    return count

# ----------------------------- –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ -----------------------------
def format_date(date):
    months = {
        "January": "—Å—ñ—á–Ω—è", "February": "–ª—é—Ç–æ–≥–æ", "March": "–±–µ—Ä–µ–∑–Ω—è",
        "April": "–∫–≤—ñ—Ç–Ω—è", "May": "—Ç—Ä–∞–≤–Ω—è", "June": "—á–µ—Ä–≤–Ω—è",
        "July": "–ª–∏–ø–Ω—è", "August": "—Å–µ—Ä–ø–Ω—è", "September": "–≤–µ—Ä–µ—Å–Ω—è",
        "October": "–∂–æ–≤—Ç–Ω—è", "November": "–ª–∏—Å—Ç–æ–ø–∞–¥–∞", "December": "–≥—Ä—É–¥–Ω—è"
    }
    eng = date.strftime("%d %B %Y")
    for en, ua in months.items():
        eng = eng.replace(en, ua)
    return eng

# ----------------------------- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—ñ–≤ -----------------------------
async def send_day_summary():
    count = await count_messages(1)
    now = datetime.now(kyiv_tz)
    await client.send_message(CHANNEL_ID, f"üìÖ {format_date(now)}\nüì¶ –ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è: {count} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—å")

async def send_week_summary():
    count = await count_messages(7)
    now = datetime.now(kyiv_tz)
    start = now - timedelta(days=6)
    start_str = start.strftime("%d %B").replace("October", "–∂–æ–≤—Ç–Ω—è")
    end_str = now.strftime("%d %B").replace("October", "–∂–æ–≤—Ç–Ω—è")
    await client.send_message(CHANNEL_ID, f"üóìÔ∏è –ü—ñ–¥—Å—É–º–æ–∫ —Ç–∏–∂–Ω—è, {start_str} ‚Äî {end_str}\n–£—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–æ–∫: {count}")

async def send_all_summary():
    count = await count_messages(None)
    await client.send_message(CHANNEL_ID, f"üìä –£—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ '–Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ' –∑–∞ –≤–µ—Å—å —á–∞—Å: {count}")

# ----------------------------- –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ -----------------------------
@client.on(events.NewMessage())
async def handler(event):
    if event.chat_id != CHANNEL_ID:
        return
    text = (event.message.message or "").strip().lower()

    if text == "/check":
        await send_day_summary()
    elif text == "/week":
        await send_week_summary()
    elif text == "/check_all":
        await send_all_summary()
    elif text in ["/reset_day", "/reset_week"]:
        await client.send_message(CHANNEL_ID, "‚ÑπÔ∏è –Ü—Å—Ç–æ—Ä—ñ—è –±–µ—Ä–µ—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É –∑ Telegram ‚Äî —Å–∫–∏–¥–∞—Ç–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ üôÇ")

# ----------------------------- –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ -----------------------------
scheduler = AsyncIOScheduler(timezone="Europe/Kyiv")
scheduler.add_job(send_day_summary, "cron", hour=18, minute=0)           # –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –æ 18:00
scheduler.add_job(send_week_summary, "cron", day_of_week="fri", hour=18, minute=1)  # —â–æ–ø‚Äô—è—Ç–Ω–∏—Ü—ñ –æ 18:01

# ----------------------------- HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render -----------------------------
def run_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), SimpleHTTPRequestHandler)
    print(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

threading.Thread(target=run_server, daemon=True).start()

# ----------------------------- –ó–∞–ø—É—Å–∫ -----------------------------
async def main():
    await client.start()
    print("‚úÖ Userbot –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ, —á–µ–∫–∞—î –Ω–∞ –∫–æ–º–∞–Ω–¥–∏...")
    scheduler.start()
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
