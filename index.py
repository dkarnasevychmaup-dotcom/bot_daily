from telethon import TelegramClient, events
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import asyncio, os, threading
from http.server import SimpleHTTPRequestHandler, HTTPServer

API_ID = 28285997                   # —Å–≤—ñ–π –∑ https://my.telegram.org/apps
API_HASH = "ed9c2749be7b40b4395c6af26c2b6bad"  # —Å–≤—ñ–π hash
SESSION = "daily_summary_session"    # —ñ–º‚Äô—è —Å–µ—Å—ñ—ó
CHANNEL_ID = -1003188966218          # —Ç–≤—ñ–π –∫–∞–Ω–∞–ª

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ ===
client = TelegramClient(SESSION, API_ID, API_HASH)

# ----------------------------- —Ñ—É–Ω–∫—Ü—ñ—ó –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É -----------------------------
async def count_messages_in_period(days=1):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ '–Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ' –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ N –¥–Ω—ñ–≤."""
    from_time = datetime.now() - timedelta(days=days)
    total = 0
    async for msg in client.iter_messages(CHANNEL_ID, offset_date=None, reverse=False):
        if msg.date < from_time:
            break
        if msg.text and "–Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ" in msg.text.lower():
            total += 1
    return total

async def send_day_summary():
    count = await count_messages_in_period(1)
    now = datetime.now()
    date_str = now.strftime("%d.%m.%Y")
    await client.send_message(CHANNEL_ID, f"üìÖ {date_str}\nüì¶ –ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è: {count} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—å")

async def send_week_summary():
    count = await count_messages_in_period(7)
    now = datetime.now()
    start = (now - timedelta(days=6)).strftime("%d.%m")
    end = now.strftime("%d.%m")
    await client.send_message(CHANNEL_ID, f"üóìÔ∏è –ü—ñ–¥—Å—É–º–æ–∫ —Ç–∏–∂–Ω—è {start}‚Äì{end}\nüì¶ –£—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–æ–∫: {count}")

# ----------------------------- –æ–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ -----------------------------
@client.on(events.NewMessage(chats=CHANNEL_ID))
async def handler(event):
    text = event.message.message.lower().strip()

    if text == "/check":
        await send_day_summary()
    elif text == "/week":
        await send_week_summary()
    elif text == "/reset_day" or text == "/reset_week":
        await client.send_message(CHANNEL_ID, "‚ÑπÔ∏è –¢–µ–ø–µ—Ä –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–∏–¥–∞—Ç–∏ üôÇ")

# ----------------------------- –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ -----------------------------
scheduler = AsyncIOScheduler(timezone="Europe/Kyiv")

# —â–æ–¥–Ω—è –æ 18:00
scheduler.add_job(send_day_summary, "cron", hour=18, minute=0)

# —â–æ–ø‚Äô—è—Ç–Ω–∏—Ü—ñ –æ 18:01
scheduler.add_job(send_week_summary, "cron", day_of_week="fri", hour=18, minute=1)

# ----------------------------- —Ñ–µ–π–∫–æ–≤–∏–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render -----------------------------
def run_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), SimpleHTTPRequestHandler)
    print(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

threading.Thread(target=run_server, daemon=True).start()

# ----------------------------- –∑–∞–ø—É—Å–∫ -----------------------------
async def main():
    await client.start()
    print("‚úÖ Userbot –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ, —á–µ–∫–∞—î –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    scheduler.start()
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
