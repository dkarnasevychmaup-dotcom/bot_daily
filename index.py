from telethon import TelegramClient, events
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import asyncio, json, os

API_ID = 28285997                   # —Å–≤—ñ–π –∑ https://my.telegram.org/apps
API_HASH = "ed9c2749be7b40b4395c6af26c2b6bad"  # —Å–≤—ñ–π hash
SESSION = "daily_summary_session"    # —ñ–º‚Äô—è —Å–µ—Å—ñ—ó
CHANNEL_ID = -1003188966218          # —Ç–≤—ñ–π –∫–∞–Ω–∞–ª
DATA_FILE = "data.json"

# ----------------------------- –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó -----------------------------
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def cleanup_old():
    data = load_data()
    week_ago = datetime.now() - timedelta(days=7)
    filtered = [d for d in data if d["ts"] > week_ago.timestamp()]
    if len(filtered) != len(data):
        save_data(filtered)
        print(f"üßπ –û—á–∏—Å—Ç–∏–≤ {len(data)-len(filtered)} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")

def format_date(date):
    months = {
        "January": "—Å—ñ—á–Ω—è", "February": "–ª—é—Ç–æ–≥–æ", "March": "–±–µ—Ä–µ–∑–Ω—è",
        "April": "–∫–≤—ñ—Ç–Ω—è", "May": "—Ç—Ä–∞–≤–Ω—è", "June": "—á–µ—Ä–≤–Ω—è",
        "July": "–ª–∏–ø–Ω—è", "August": "—Å–µ—Ä–ø–Ω—è", "September": "–≤–µ—Ä–µ—Å–Ω—è",
        "October": "–∂–æ–≤—Ç–Ω—è", "November": "–ª–∏—Å—Ç–æ–ø–∞–¥–∞", "December": "–≥—Ä—É–¥–Ω—è"
    }
    eng = date.strftime("%d %B %Y")
    for en, ua in months.items():
        eng = eng.replace(en, ua)
    return eng

# ----------------------------- –æ—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ -----------------------------
client = TelegramClient(SESSION, API_ID, API_HASH)

@client.on(events.NewMessage(chats=CHANNEL_ID))
async def handler(event):
    text = event.message.message.lower()

    # —Ä–∞—Ö—É—î–º–æ –Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω—ñ
    if "–Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ" in text:
        data = load_data()
        data.append({"ts": datetime.now().timestamp(), "text": event.message.message})
        save_data(data)
        print("üì• –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ")

    # –∫–æ–º–∞–Ω–¥–∏
    if text.strip() == "/check":
        await send_day_summary()
    elif text.strip() == "/week":
        await send_week_summary()
    elif text.strip() == "/reset_day":
        reset_day()
        await client.send_message(CHANNEL_ID, "‚ôªÔ∏è –î–µ–Ω–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –æ—á–∏—â–µ–Ω–æ.")
    elif text.strip() == "/reset_week":
        save_data([])
        await client.send_message(CHANNEL_ID, "‚ôªÔ∏è –¢–∏–∂–Ω–µ–≤–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –æ—á–∏—â–µ–Ω–æ.")

# ----------------------------- –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ -----------------------------
async def send_day_summary():
    data = load_data()
    now = datetime.now()
    start = datetime(now.year, now.month, now.day)
    end = start + timedelta(days=1)
    count = len([d for d in data if start.timestamp() <= d["ts"] < end.timestamp()])
    await client.send_message(CHANNEL_ID, f"üìÖ {format_date(now)}\nüì¶ –ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è: {count} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—å")

async def send_week_summary():
    data = load_data()
    now = datetime.now()
    start = now - timedelta(days=6)
    count = len([d for d in data if d["ts"] >= start.timestamp()])
    start_str = start.strftime("%d %B").replace("October","–∂–æ–≤—Ç–Ω—è")
    end_str = now.strftime("%d %B").replace("October","–∂–æ–≤—Ç–Ω—è")
    await client.send_message(CHANNEL_ID, f"üóìÔ∏è –ü—ñ–¥—Å—É–º–æ–∫ —Ç–∏–∂–Ω—è, {start_str} ‚Äî {end_str}\n–£—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–æ–∫: {count}")

def reset_day():
    data = load_data()
    now = datetime.now()
    start = datetime(now.year, now.month, now.day)
    filtered = [d for d in data if d["ts"] < start.timestamp()]
    save_data(filtered)

# ----------------------------- –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ -----------------------------
scheduler = AsyncIOScheduler(timezone="Europe/Kyiv")
scheduler.add_job(cleanup_old, "interval", hours=12)
scheduler.add_job(send_day_summary, "cron", hour=18, minute=0)
scheduler.add_job(send_week_summary, "cron", day_of_week="fri", hour=18, minute=1)

# ----------------------------- –∑–∞–ø—É—Å–∫ -----------------------------
async def main():
    await client.start()
    print("‚úÖ Userbot –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ, —á–µ–∫–∞—î –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    scheduler.start()
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
