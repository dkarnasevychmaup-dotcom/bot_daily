from telethon import TelegramClient, events
from datetime import datetime, timedelta, timezone
from apscheduler.schedulers.background import BackgroundScheduler
from flask import Flask
import threading, os, asyncio

# === –ö–û–ù–§–Ü–ì ===
API_ID = 28285997
API_HASH = "ed9c2749be7b40b4395c6af26c2b6bad"
SESSION = "daily_summary_session"
CHANNEL_ID = -1003188966218  # —Ç–≤—ñ–π –∫–∞–Ω–∞–ª

# === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ===
client = TelegramClient(SESSION, API_ID, API_HASH)
app = Flask(__name__)

def format_date(date):
    months = {
        "January": "—Å—ñ—á–Ω—è", "February": "–ª—é—Ç–æ–≥–æ", "March": "–±–µ—Ä–µ–∑–Ω—è",
        "April": "–∫–≤—ñ—Ç–Ω—è", "May": "—Ç—Ä–∞–≤–Ω—è", "June": "—á–µ—Ä–≤–Ω—è",
        "July": "–ª–∏–ø–Ω—è", "August": "—Å–µ—Ä–ø–Ω—è", "September": "–≤–µ—Ä–µ—Å–Ω—è",
        "October": "–∂–æ–≤—Ç–Ω—è", "November": "–ª–∏—Å—Ç–æ–ø–∞–¥–∞", "December": "–≥—Ä—É–¥–Ω—è"
    }
    eng = date.strftime("%d %B %Y")
    for en, ua in months.items():
        eng = eng.replace(en, ua)
    return eng

# === –ü–Ü–î–†–ê–•–£–ù–û–ö –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ===
async def count_messages(days=1):
    now = datetime.now(timezone.utc)
    since = now - timedelta(days=days)
    count = 0
    async for msg in client.iter_messages(CHANNEL_ID, limit=5000):
        if msg.date.replace(tzinfo=timezone.utc) < since:
            break
        if msg.message and "–Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ" in msg.message.lower():
            count += 1
    return count

async def send_day_summary():
    count = await count_messages(1)
    now = datetime.now()
    await client.send_message(
        CHANNEL_ID,
        f"üìÖ {format_date(now)}\nüì¶ –ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è: {count} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—å"
    )

async def send_week_summary():
    count = await count_messages(7)
    now = datetime.now()
    start = (now - timedelta(days=6)).strftime("%d %B").replace("October", "–∂–æ–≤—Ç–Ω—è")
    end = now.strftime("%d %B").replace("October", "–∂–æ–≤—Ç–Ω—è")
    await client.send_message(
        CHANNEL_ID,
        f"üóìÔ∏è –ü—ñ–¥—Å—É–º–æ–∫ —Ç–∏–∂–Ω—è, {start} ‚Äî {end}\n–£—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–æ–∫: {count}"
    )

async def send_all_summary():
    count = 0
    async for msg in client.iter_messages(CHANNEL_ID, limit=None):
        if msg.message and "–Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ" in msg.message.lower():
            count += 1
    await client.send_message(
        CHANNEL_ID,
        f"üìä –£—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—å –∑–∞ –≤–µ—Å—å —á–∞—Å: {count}"
    )

# === –ö–û–ú–ê–ù–î–ò ===
@client.on(events.NewMessage(chats=CHANNEL_ID))
async def command_handler(event):
    text = event.message.message.lower().strip()
    if text == "/check":
        await send_day_summary()
    elif text == "/week":
        await send_week_summary()
    elif text == "/check_all":
        await send_all_summary()

# === –©–û–î–ï–ù–ù–ò–ô –†–û–ó–ö–õ–ê–î ===
scheduler = BackgroundScheduler(timezone="Europe/Kyiv")
scheduler.add_job(lambda: asyncio.run(send_day_summary()), "cron", hour=18, minute=0)
scheduler.add_job(lambda: asyncio.run(send_week_summary()), "cron", day_of_week="fri", hour=18, minute=1)
scheduler.start()

# === KEEP-ALIVE FLASK ===
@app.route("/")
def home():
    return "‚úÖ Userbot –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ."

def run_flask():
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

# === –°–¢–ê–†–¢ ===
async def main():
    await client.start()
    print("‚úÖ Userbot –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ...")
    await client.send_message(CHANNEL_ID, "‚ôªÔ∏è –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ, –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ")
    await client.run_until_disconnected()

if __name__ == "__main__":
    threading.Thread(target=run_flask, daemon=True).start()
    asyncio.run(main())
